A data system implemented by shell scripts
==========================================
It is common when connecting one’s computer to a new network to have to ‘‘register’’ the computer with system administration staff. Typically this means you automatically get an IP address via the DHCP protocol when you connect your computer to the network, and in some cases this registration also gives you a name in the Domain Name System.
If your computer has hostname ‘‘foo’’, this name would be supported by a line in a DNS ‘‘zone’’ file which looks like this:
       foo   IN   A   192.168.1.38
and if that computer automatically gets that IP address by DHCP then that would be supported by a clause in the dhcp server configuration file which looks like this:
       host foo {
           hardware ethernet 00:0d:93:3c:17:f0;
           fixed-address 192.168.1.38;
}
Your task for the rest of this assignment is to write a shell script named ‘‘addhost’’ which adds a new computer to the database given its hardware address, choosing an IP address for it; a shell script named ‘‘makedns’’ which outputs a DNS zone file based on the hosts (computers) registered with addhost; and a shell script named ‘‘makedhcp’’ which outputs a DHCP server configuration file similarly.
addhost
The ‘‘addhost’’ script expects two command-line arguments: the machine name and the hardware address, normally known as the ‘‘MAC address’’ (nothing to do with Apple Macintosh). It will store its information in the directory $HOME/hosts, which should exist (it is a fatal error if it doesn’t). Each file in $HOME/hosts has a file name which is the machine name (e.g. ‘‘foo’’ in the above example) and two lines of content. The first line is the MAC address, which is a colon-separated list of six eight-bit numbers in hexadecimal (for the purposes of this assignment, just accept any string), and the second line is the assigned IP address.

Assigned IP addresses will start with 192.168.1.1. To assign a new IP address, examine all of the files in $HOME/hosts (if any), find the maximum third octet (number), and find the maximum fourth octet for that third octet. Add one to the fourth octet, but 255 (and greater) is not allowed; when the fourth octet reaches 255, reset it to 1 and increment the third octet.
Examples: The IP address subsequent to 192.168.3.123 is 192.168.3.124; the IP address subsequent to 192.168.3.254 is 192.168.4.1.
Note that you must consult the $HOME/hosts/* files to determine the next IP address, rather than storing the current value elsewhere, because there may be programs other than your addhost which modify the $HOME/hosts database.
makedns
A DNS zone file looks something like this (the following is slightly simplified for this assignment):
       example.org IN SOA ns1.example.org 2013091502
           IN NS 0 ns1.example.net.
           IN NS 0 ns2.example.net.
           IN MX 0 mail.example.net.
       foo IN A 192.168.1.1
       bar IN A 192.168.1.2
       baz IN A 192.168.1.3
The most exciting part here is the ‘‘serial number’’ at the end of the first line. Each new version of the zone file needs to have a higher serial number than the previous one, so you will store the last serial number in the file $HOME/lastserial, and consult this when generating the new file.
Furthermore, we format the serial number as yyyymmddnn for the current date followed by two more digits as described shortly. Those first eight digits can be generated via ‘‘date +%Y%m%d’’. The subsequent two digits will initially be zeroes, but if ‘‘makedns’’ is run multiple times in the same day, larger numbers will be used (just add one). If makedns is run more than a hundred times in the same day, we will end up carrying into the day number, which is fine; just keep track of the last serial number.
The rest of the prologue (the first four lines above) you can just output verbatim.
Then you output the host records, one per line.
Makedns outputs its data to the standard output, for the user to redirect as appropriate (or for you simply to
view while testing).
makedhcp
The DHCP server configuration file is relatively simpler. It looks like this:
       authoritative;
       deny unknown-clients;
       option routers 10.3.8.16;
       option domain-name-servers 10.3.8.20, 10.3.8.21;
       subnet 192.168.0.0 netmask 255.255.0.0 {
       }
       host foo {
           hardware ethernet 00:0d:93:3c:17:f0;
           fixed-address 192.168.1.1;
}
host bar {
           hardware ethernet 00:0d:93:3c:17:f8;
           fixed-address 192.168.1.2;
       }
       host baz {
           hardware ethernet 00:0d:93:3c:17:fc;
           fixed-address 192.168.1.3;
}

The ‘‘makedhcp’’ program outputs this data to the standard output. The first two paragraphs are fixed text, not simplified for this assignment.
